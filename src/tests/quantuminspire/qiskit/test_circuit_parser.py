import unittest
from unittest.mock import Mock

import numpy as np
import qiskit
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit

from quantuminspire.qiskit.backend_qx import QuantumInspireBackend


class TestQiCircuitToString(unittest.TestCase):

    def test_generate_cqasm_WithEntangleAlgorithm(self):
        q = QuantumRegister(2)
        b = ClassicalRegister(2)
        circuit = QuantumCircuit(q, b)

        circuit.h(q[0])
        circuit.cx(q[0], q[1])
        circuit.measure(q[0], b[0])
        circuit.measure(q[1], b[1])

        simulator = QuantumInspireBackend(Mock(), Mock())
        qiskit_job = qiskit.compile(circuit, simulator)
        experiment = qiskit_job.experiments[0]
        result = simulator._generate_cqasm(experiment)
        expected = "version 1.0\n" \
                   "# cQASM generated by QI backend for Qiskit\n" \
                   "qubits 2\n" \
                   "H q[0]\n" \
                   "CNOT q[0], q[1]\n"
        self.assertEqual(result, expected)

    @staticmethod
    def _generate_cqasm_from_instructions(instructions, number_of_qubits=2):
        experiment_dict = {'instructions': instructions,
                           'header': {'n_qubits': number_of_qubits,
                                      'number_of_clbits': number_of_qubits,
                                      'compiled_circuit_qasm': ''},
                           'config': {'coupling_map': 'all-to-all',
                                      'basis_gates': 'x,y,z,h,rx,ry,rz,s,cx,ccx,u1,u2,u3,id,snapshot',
                                      'n_qubits': number_of_qubits}}
        experiment = qiskit.qobj.QobjExperiment.from_dict(experiment_dict)
        simulator = QuantumInspireBackend(Mock(), Mock())
        result = simulator._generate_cqasm(experiment)
        return result

    def test_generate_cqasm_CorrectOutputControlledNot(self):
        instructions = [{'name': 'cx', 'qubits': [0, 1]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('CNOT q[0], q[1]\n' in result)

    def test_generate_cqasm_CorrectOutputToffoli(self):
        instructions = [{'name': 'ccx', 'qubits': [0, 1, 2]}]
        result = self._generate_cqasm_from_instructions(instructions, number_of_qubits=3)
        self.assertTrue('Toffoli q[0], q[1], q[2]\n' in result)

    def test_generate_cqasm_CorrectOutputMeasure(self):
        instructions = [{'name': 'measure', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 3)
        measure_line = '.measurement\n   measure q[0]\n   measure q[1]\n   measure q[2]\n'
        self.assertTrue(measure_line not in result)

    def test_generate_cqasm_CorrectOutputHadamard(self):
        instructions = [{'name': 'h', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('H q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputBarrier(self):
        instructions = [{'name': 'barrier', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertFalse('barrier' in result)

    def test_generate_cqasm_CorrectOutputIdentity(self):
        instructions = [{'name': 'id', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertFalse('id' in result)

    def test_generate_cqasm_CorrectOutputGateX(self):
        instructions = [{'name': 'x', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('X q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputGateY(self):
        instructions = [{'name': 'y', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Y q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputGateZ(self):
        instructions = [{'name': 'z', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Z q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputGateU(self):
        instructions = [{'name': 'u', 'qubits': [0], 'params': [0, 0, np.pi / 2],
                         'texparams': ['0', '0', '\\frac{\\pi}{2}']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[0], 1.570796\n' in result)

        instructions = [{'name': 'u', 'qubits': [0], 'params': [-np.pi / 2, 0, 0],
                         'texparams': ['-\\frac{\\pi}{2}', '0', '0']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Ry q[0], -1.570796\n' in result)

        instructions = [{'name': 'u', 'qubits': [0], 'params': [np.pi / 4, np.pi / 2, -np.pi / 2],
                         'texparams': ['\\frac{\\pi}{4}', '\\frac{\\pi}{2}', '-\\frac{\\pi}{2}']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[0], -1.570796\nRy q[0], 0.785398\nRz q[0], 1.570796\n' in result)

        instructions = [{'name': 'u', 'qubits': [1], 'params': [0.123456, 0.654321, -0.333333],
                         'texparams': ['0.123456', '0.654321', '-0.333333']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[1], -0.333333\nRy q[1], 0.123456\nRz q[1], 0.654321\n' in result)

    def test_generate_cqasm_CorrectOutputGateU0(self):
        instructions = [{'name': 'u0', 'qubits': [0]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertFalse('U0' in result)

    def test_generate_cqasm_CorrectOutputGateU1(self):
        instructions = [{'name': 'u1', 'qubits': [0], 'params': [np.pi / 2], 'texparams': ['\\frac{\\pi}{2}']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[0], 1.570796\n' in result)

        instructions = [{'name': 'u1', 'qubits': [1], 'params': [np.pi / 4], 'texparams': ['\\frac{\\pi}{4}']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[1], 0.785398\n' in result)

        instructions = [{'name': 'u1', 'qubits': [2], 'params': [-np.pi / 4], 'texparams': ['-\\frac{\\pi}{4}']}]
        result = self._generate_cqasm_from_instructions(instructions, 3)
        self.assertTrue('Rz q[2], -0.785398\n' in result)

        instructions = [{'name': 'u1', 'qubits': [2], 'params': [0.123456], 'texparams': ['0.123456']}]
        result = self._generate_cqasm_from_instructions(instructions, 3)
        self.assertTrue('Rz q[2], 0.123456\n' in result)

        instructions = [{'name': 'u1', 'qubits': [0], 'params': [0], 'texparams': ['0']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertFalse('q[0]' in result)

    def test_generate_cqasm_CorrectOutputGateU2(self):
        instructions = [{'name': 'u2', 'qubits': [0], 'params': [np.pi, np.pi / 2],
                         'texparams': ['\\pi', '\\frac{\\pi}{2}']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[0], 1.570796\nRy q[0], 1.570796\nRz q[0], 3.141593\n' in result)

        instructions = [{'name': 'u2', 'qubits': [1], 'params': [0, np.pi], 'texparams': ['0', '\\pi']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[1], 3.141593\nRy q[1], 1.570796\n' in result)

        instructions = [{'name': 'u2', 'qubits': [2], 'params': [0.123456, -0.654321],
                         'texparams': ['0.123456', '-0.654321']}]
        result = self._generate_cqasm_from_instructions(instructions, 3)
        self.assertTrue('Rz q[2], -0.654321\nRy q[2], 1.570796\nRz q[2], 0.123456\n' in result)

        instructions = [{'name': 'u2', 'qubits': [0], 'params': [0, 0], 'texparams': ['0', '0']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Ry q[0], 1.570796\n' in result)

    def test_generate_cqasm_CorrectOutputU3(self):
        instructions = [{'name': 'u3', 'qubits': [0], 'params': [1, 2, 3], 'texparams': ['1', '2', '3']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[0], 3.000000\nRy q[0], 1.000000\nRz q[0], 2.000000\n' in result)

        instructions = [{'name': 'u3', 'qubits': [1], 'params': [0.123456, 0.654321, -0.333333],
                         'texparams': ['0.123456', '0.654321', '-0.333333']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[1], -0.333333\nRy q[1], 0.123456\nRz q[1], 0.654321\n' in result)

        instructions = [{'name': 'u3', 'qubits': [1], 'params': [0, 0.654321, 0], 'texparams': ['0', '0.654321', '0']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[1], 0.654321\n' in result)

        instructions = [{'name': 'u3', 'qubits': [2], 'params': [0.654321, 0, 0], 'texparams': ['0.654321', '0', '0']}]
        result = self._generate_cqasm_from_instructions(instructions, 3)
        self.assertTrue('Ry q[2], 0.654321\n' in result)

        instructions = [{'name': 'u3', 'qubits': [0], 'params': [0, 0, 0], 'texparams': ['0', '0', '0']}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertFalse('q[0]' in result)

    def test_generate_cqasm_CorrectOutputRotationX(self):
        instructions = [{'name': 'rx', 'qubits': [0], 'params': [np.pi / 2]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rx q[0], 1.570796\n' in result)

        instructions = [{'name': 'rx', 'qubits': [1], 'params': [0.123456]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rx q[1], 0.123456\n' in result)

    def test_generate_cqasm_CorrectOutputRotationY(self):
        instructions = [{'name': 'ry', 'qubits': [0], 'params': [np.pi / 2]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Ry q[0], 1.570796\n' in result)

        instructions = [{'name': 'ry', 'qubits': [1], 'params': [0.654321]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Ry q[1], 0.654321\n' in result)

    def test_generate_cqasm_CorrectOutputRotationZ(self):
        instructions = [{'name': 'rz', 'qubits': [0], 'params': [np.pi / 2]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[0], 1.570796\n' in result)

        instructions = [{'name': 'rz', 'qubits': [1], 'params': [-np.pi / 2]}]
        result = self._generate_cqasm_from_instructions(instructions, 2)
        self.assertTrue('Rz q[1], -1.570796\n' in result)
